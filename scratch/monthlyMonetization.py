#!/usr/bin/env python

from copy import copy
from pprint import pprint

power = [['', 'CVR', 'NoCVR'], 
	['2000-07-07 00:00:00 PDT', 160.803, 160.149],
	['2000-07-08 00:00:00 PDT', 320.58477, 359.54220000000004],
	['2000-07-09 00:00:00 PDT', 353.23454, 369.06116],
	['2000-07-10 00:00:00 PDT', 704.1952, 709.4427],
	['2000-07-11 00:00:00 PDT', 317.10215000000005, 331.40631],
	['2000-07-12 00:00:00 PDT', 321.47209000000004, 334.44932],
	['2000-07-13 00:00:00 PDT', 375.8925, 411.0509],
	['2000-07-14 00:00:00 PDT', 316.25915999999995, 325.50286],
	['2000-07-15 00:00:00 PDT', 320.68237, 351.56054],
	['2000-07-16 00:00:00 PDT', 339.61225, 341.27817],
	['2000-07-17 00:00:00 PDT', 837.8979, 1011.201],
	['2000-07-18 00:00:00 PDT', 892.4098, 992.6],
	['2000-07-19 00:00:00 PDT', 337.20716, 366.7477],
	['2000-07-20 00:00:00 PDT', 339.16422, 355.92181],
	['2000-07-21 00:00:00 PDT', 312.60873, 339.26299],
	['2000-07-22 00:00:00 PDT', 324.55897999999996, 337.22684000000004],
	['2000-07-23 00:00:00 PDT', 339.36507, 350.70874],
	['2000-07-24 00:00:00 PDT', 750.5993100000001, 938.122],
	['2000-07-25 00:00:00 PDT', 321.89014000000003, 334.99024],
	['2000-07-26 00:00:00 PDT', 313.6743, 326.01507],
	['2000-07-27 00:00:00 PDT', 321.43147, 338.83229],
	['2000-07-28 00:00:00 PDT', 314.02694, 325.59476],
	['2000-07-29 00:00:00 PDT', 320.15785, 337.52555],
	['2000-07-30 00:00:00 PDT', 345.07519, 359.52284000000003],
	['2000-07-31 00:00:00 PDT', 814.301, 841.929],
	['2000-08-01 00:00:00 PDT', 313.16946, 325.62356],
	['2000-08-02 00:00:00 PDT', 321.40056, 334.67175],
	['2000-08-03 00:00:00 PDT', 308.8424, 333.91765000000004],
	['2000-08-04 00:00:00 PDT', 317.6304, 334.84488],
	['2000-08-05 00:00:00 PDT', 316.09967, 332.84351000000004],
	['2000-08-06 00:00:00 PDT', 334.68309000000005, 350.76335],
	['2000-08-07 00:00:00 PDT', 335.72371999999996, 357.89459000000005],
	['2000-08-08 00:00:00 PDT', 325.55622, 340.1585],
	['2000-08-09 00:00:00 PDT', 308.75342, 334.78770000000003],
	['2000-08-10 00:00:00 PDT', 312.56037, 335.18690999999995],
	['2000-08-11 00:00:00 PDT', 313.59722, 325.718],
	['2000-08-12 00:00:00 PDT', 320.33320000000003, 351.30832],
	['2000-08-13 00:00:00 PDT', 341.72936, 350.12328],
	['2000-08-14 00:00:00 PDT', 402.77259999999995, 413.5612],
	['2000-08-15 00:00:00 PDT', 317.81392, 350.39140000000003],
	['2000-08-16 00:00:00 PDT', 314.0984, 330.36217],
	['2000-08-17 00:00:00 PDT', 309.10832, 334.89018],
	['2000-08-18 00:00:00 PDT', 313.25685999999996, 339.02187],
	['2000-08-19 00:00:00 PDT', 316.09968, 342.83125],
	['2000-08-20 00:00:00 PDT', 331.9643, 363.80265],
	['2000-08-21 00:00:00 PDT', 578.3374, 621.0179],
	['2000-08-22 00:00:00 PDT', 313.41297, 325.72514],
	['2000-08-23 00:00:00 PDT', 318.05636, 338.84952000000004],
	['2000-08-24 00:00:00 PDT', 320.38647, 330.69728000000003],
	['2000-08-25 00:00:00 PDT', 325.73621999999995, 339.25971999999996],
	['2000-08-26 00:00:00 PDT', 323.66063, 332.84351000000004],
	['2000-08-27 00:00:00 PDT', 344.47793, 350.6652],
	['2000-08-28 00:00:00 PDT', 707.3594, 698.7433000000001],
	['2000-08-29 00:00:00 PDT', 318.31509, 345.07494],
	['2000-08-30 00:00:00 PDT', 335.07518, 346.60098999999997],
	['2000-08-31 00:00:00 PDT', 405.6952, 487.7714],
	['2000-09-01 00:00:00 PDT', 329.79284, 344.25286],
	['2000-09-02 00:00:00 PDT', 410.3753, 444.3995],
	['2000-09-03 00:00:00 PDT', 344.15484999999995, 349.76968],
	['2000-09-04 00:00:00 PDT', 320.6284, 324.66265999999996],
	['2000-09-05 00:00:00 PDT', 317.66911, 325.60133],
	['2000-09-06 00:00:00 PDT', 329.60409000000004, 325.60134000000005],
	['2000-09-07 00:00:00 PDT', 313.28231, 350.37218],
	['2000-09-08 00:00:00 PDT', 308.22431, 326.21645],
	['2000-09-09 00:00:00 PDT', 332.23341, 351.93934],
	['2000-09-10 00:00:00 PDT', 344.56503999999995, 345.74206],
	['2000-09-11 00:00:00 PDT', 323.57271000000003, 329.01096],
	['2000-09-12 00:00:00 PDT', 325.03112, 349.49442999999997],
	['2000-09-13 00:00:00 PDT', 319.16863, 335.8182],
	['2000-09-14 00:00:00 PDT', 308.84241, 321.12265],
	['2000-09-15 00:00:00 PDT', 328.65438, 334.43742],
	['2000-09-16 00:00:00 PDT', 342.89544, 352.39261],
	['2000-09-17 00:00:00 PDT', 331.60874, 345.61843],
	['2000-09-18 00:00:00 PDT', 319.77419, 333.74357000000003],
	['2000-09-19 00:00:00 PDT', 324.90051, 343.414],
	['2000-09-20 00:00:00 PDT', 2173.392, 2183.15],
	['2000-09-21 00:00:00 PDT', 322.22726, 335.14853000000005],
	['2000-09-22 00:00:00 PDT', 317.59335999999996, 339.39355],
	['2000-09-23 00:00:00 PDT', 336.60027, 351.75791999999996],
	['2000-09-24 00:00:00 PDT', 1458.989, 1505.133],
	['2000-09-25 00:00:00 PDT', 317.20152, 334.3532],
	['2000-09-26 00:00:00 PDT', 329.20968, 334.86869],
	['2000-09-27 00:00:00 PDT', 2465.652, 2662.361],
	['2000-09-28 00:00:00 PDT', 1117.0065, 1255.328],
	['2000-09-29 00:00:00 PDT', 330.34772, 330.51297999999997],
	['2000-09-30 00:00:00 PDT', 345.32466, 346.56343],
	['2000-10-01 00:00:00 PDT', 366.29391, 382.29596000000004],
	['2000-10-02 00:00:00 PDT', 429.1727, 436.4896],
	['2000-10-03 00:00:00 PDT', 903.284, 1146.181],
	['2000-10-04 00:00:00 PDT', 360.94079, 381.22596000000004],
	['2000-10-05 00:00:00 PDT', 349.60411, 363.90455],
	['2000-10-06 00:00:00 PDT', 356.49316, 373.50921999999997],
	['2000-10-07 00:00:00 PDT', 1016.5921999999999, 1154.583],
	['2000-10-08 00:00:00 PDT', 3233.45, 3992.534],
	['2000-10-09 00:00:00 PDT', 3799.628, 4241.719],
	['2000-10-10 00:00:00 PDT', 2217.613, 2316.601],
	['2000-10-11 00:00:00 PDT', 1604.751, 1602.227],
	['2000-10-12 00:00:00 PDT', 761.4630999999999, 575.215],
	['2000-10-13 00:00:00 PDT', 971.6286, 1166.112],
	['2000-10-14 00:00:00 PDT', 1370.263, 1572.037]]

body = power[1:]


def processMonths(inList, listFunc):
	# Given a month chunk, replace values so they're all equal to the listFunc ones.
	def peakPower(monthList):
		colForm = zip(*monthList)
		header = colForm[0]
		def replaceWithMax(inList):
			maximum = listFunc(inList)
			return map(lambda x:maximum, inList)
		peaks = [header] + map(replaceWithMax, colForm[1:])
		return [list(x) for x in zip(*peaks)]
	# Walk the full inList, split it into months, and process each month chunk.
	workList = copy(inList)
	monthYear = workList[0][0][0:7]
	startRow = 0
	for rowNum in xrange(len(inList)):
		if workList[rowNum][0][0:7] == monthYear and rowNum != len(inList)-1:
			pass
		else:
			monthYear = workList[rowNum][0][0:7]
			workList[startRow:rowNum+1] = peakPower(workList[startRow:rowNum+1])
			startRow = rowNum
	return workList

pprint(body)

print '---------------------------------'

output = processMonths(body, lambda x:sum(x)/len(x))

pprint(output)